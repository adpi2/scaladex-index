{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":98,
            "title":"Add NonEmpty data structure to the collections",
            "bodyText":"There exists third-party code that integrates with the previous Scala collections to provide a non empty collection that proves its contents are non-zero. This is useful in lots of cases and since now only Scalaz has provided this functionality out of the box.\nI think this may shine on public APIs, providing more type safety. I have just found a use case for this in the sbt API (sbt/sbt#3230) but we cannot use it because it's not in the official collections. We may end up porting the implementation over to sbt/sbt.\n@julienrf @szeiger What do you think?",
            "url":"https://github.com/scala/collection-strawman/issues/98"
          },
          {
            "number":107,
            "title":"FoldWhile",
            "bodyText":"Recently I came across this code:\n  implicit class GenTraversableOnceExtensions[A](val coll: GenTraversableOnce[A]) extends AnyVal{\n    /**\n    Fold while accumulation function returns Some. Stops on first None.\n    @param initial initual element to start the accumulation on\n    @param accumulate accumulation function\n    */\n    def foldWhile[A1 >: A](initial: A1)\n      (accumulate: (A1, A1) => Option[A1]): A1\n      = foldLeftWhile[A1](initial)(accumulate)\n\n    /**\n    Fold while accumulation function returns Some. Stops on first None.\n    @param initial initual element to start the accumulation on\n    @param accumulate accumulation function\n    */\n    def foldLeftWhile[B](initial: B)\n      (accumulate: (B, A) => Option[B]): B = {\n      @tailrec\n      def loop(it: Iterator[A], prev: B): B = {\n        if(it.hasNext){\n          val next = it.next\n          val current = accumulate(prev,next)\n          if (current.isEmpty) prev\n          else loop(it,current.get)\n        } else prev\n      }\n      loop(coll.toIterator, initial)\n    }\n  }\nI'm written multiple variations of an abort early fold like this one.\nI think it is a sufficiently common use case with collections that should merit its inclusion the new redesign. Unfortunately I have no data to prove it is in fact a common use case.",
            "url":"https://github.com/scala/collection-strawman/issues/107"
          },
          {
            "number":133,
            "title":"Add `MultiSet`",
            "bodyText":"And maybe MultiMap?",
            "url":"https://github.com/scala/collection-strawman/issues/133"
          },
          {
            "number":143,
            "title":"Fix scaladoc",
            "bodyText":"The scaladoc comments have been mostly copied from the current collections. They sometimes contains references to undefined variables.",
            "url":"https://github.com/scala/collection-strawman/issues/143"
          },
          {
            "number":155,
            "title":"Scaladoc with images",
            "bodyText":"The documentation of ReactiveX Observable uses images for a lot of the methods, things like:\nMap:\n\nFlatten:\n\nDistinct:\n\nI find these diagrams very useful to explain the functions on collections for people that are learning Scala for the first time.\nI suggest including them in the scaladocs of the new collections as it would be extremely helpful for the newcomers.\nReactiveX uses the Apache2 license and makes the stencils used to create them available.",
            "url":"https://github.com/scala/collection-strawman/issues/155"
          },
          {
            "number":171,
            "title":"Check that concat is properly overriden for performance",
            "bodyText":"concat was one of the first methods introduced in the strawman. We didn\u2019t carefully check that it is actually overriden when it can be more efficient (e.g. in StrictOptimizedIterableOps).",
            "url":"https://github.com/scala/collection-strawman/issues/171"
          },
          {
            "number":186,
            "title":"Consider adding a lazyFoldRight method on LazyList",
            "bodyText":"",
            "url":"https://github.com/scala/collection-strawman/issues/186"
          },
          {
            "number":214,
            "title":"Backport work that has been made on scala/scala",
            "bodyText":"For instance: scala/scala#5972\nHere is the history of the collections: https://github.com/scala/scala/commits/2.13.x/src/library/scala/collection\nHere is the history of the JUnit tests: https://github.com/scala/scala/commits/2.13.x/test/junit/scala/collection",
            "url":"https://github.com/scala/collection-strawman/issues/214"
          },
          {
            "number":221,
            "title":"Add zipWith operation",
            "bodyText":"It\u2019s a generalization of zip, its signature would be the following:\ntrait IterableOps[A, CC[_], C] {\n  def zipWith[B, R](that: Iterable[B])(f: (A, B) => R): CC[R]\n}\nSemantically speaking, (xs zip ys) map f is equivalent to xs.zipWith(ys)(f).",
            "url":"https://github.com/scala/collection-strawman/issues/221"
          },
          {
            "number":233,
            "title":"List.fill performance problem",
            "bodyText":"#232 shows that List.fill has a severe performance problem for large values of n. I suspect other builder functions have the same problem.\n[info] Benchmark                 (size)  Mode  Cnt           Score            Error  Units\n[info] ListBenchmark.fill       7312102  avgt   10  1016141204.700 ± 3015303989.604  ns/op\n[info] ScalaListBenchmark.fill  7312102  avgt   10    72150762.767 ±    8988583.569  ns/op",
            "url":"https://github.com/scala/collection-strawman/issues/233"
          },
          {
            "number":240,
            "title":"Consider adding a `merged` or `mergedWith` operation on `Map`",
            "bodyText":"As described here: https://github.com/jozic/scalax-collection#mergedwith\nNote: in collection.immutable.HashMap we already have it and it is named merged. We could just pull it up to collection.Map.",
            "url":"https://github.com/scala/collection-strawman/issues/240"
          },
          {
            "number":247,
            "title":"Consider providing better support for traverse/sequence operations",
            "bodyText":"These operations have been mentioned several times in recent discussions initiated here.\nOne difficulty is that traverse and sequence involve two capabilities: Traverse and Applicative, so the best way to handle all possible combinations (e.g. Option[Future[_]], List[Future[_]], Option[List[_]], List[Option[_]], List[Either[_, _]], etc.) is probably to use typeclasses. Currently in the standard library we only support Future.sequence, which work only for Seqs nested in Futures. If we want to support other types (ie. not only List[Future[_]] but also Option[Future[_]]), we should probably do it by using a typeclass (which would contain the zipWith operation, and would be implemented by collections and Option and Either, for instance).\nBut it would also be interesting to have these sequence and traverse methods available on other types than Future. Useful candidates would be Option, Either and Try.\nSee also this previous discussion",
            "url":"https://github.com/scala/collection-strawman/issues/247"
          },
          {
            "number":251,
            "title":"Compute family of functions for mutable and immutable Maps",
            "bodyText":"Consider adding\n// Possible implementations in terms of public-facing API.\n\ndef compute(key: K, f: Option[V] => Option[V]): Map[K, V] = \n  f(this.get(key)) match { \n    case None => this.remove(key)\n    case Some(x) => this.updated(key, x)\n  }\n\ndef computeIfAbsent(key: K, f: => V): Map[K, V] = \n  this.get(key) match {\n    case None => this.updated(key, f)\n    case Some(_) => this\n  }\n\ndef computeIfPresent(key: K, f: V => Option[V]): Map[K, V] =\n  this.get(key) match {\n    case None => this\n    case Some(x) => f(x) match {\n      case None => this.remove(key)\n      case Some(y) => this.updated(key, y)\n    }\n  }\nto immutable Maps and similar operations to mutable Maps (see https://docs.oracle.com/javase/8/docs/api/java/util/Map.html).\nThese patterns occur fairly often in Java (probably 90% of operations on java.util.Map in my experience).",
            "url":"https://github.com/scala/collection-strawman/issues/251"
          }
        ]
      }
    }
  }
}