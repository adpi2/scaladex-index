{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":1192,
            "title":"Give readable error message in case required classes in Definitons are missing",
            "bodyText":"if eg, DottyPredef is absent at the classpath, you get a very nasty stacktrace:\nhttps://gist.github.com/densh/73f4b27ae6385599aae85a4b4c81c077\nKnowing the details of compiler internals, it's easy for me to see what went wrong, but it's not for someone who is just doing first steps in playing with dotty compiler.\nI would be good if we reported a readable error instead and aborted compilation.\nThis could potentially be done even before parsing, simply to check if all the required classes are present.",
            "url":"https://github.com/lampepfl/dotty/issues/1192"
          },
          {
            "number":1290,
            "title":"SBT: report a warning if ./scala-scala is absent",
            "bodyText":"Dotty test suite would fail if one didn't clone compatible version of stdlib.\nIt would be nice to give a warning for people running either test or partests suggesting the to do:\ngit clone -b dotty-library https://github.com/DarkDimius/scala.git ./scala-scala",
            "url":"https://github.com/lampepfl/dotty/issues/1290"
          },
          {
            "number":1310,
            "title":"FunctionalInterfaces should also transform non-SAMs for concistency.",
            "bodyText":"If we have a SAM that implements a Function1[Int, Int], we currently rewrite it to have a specialized superclass(JFunction1$mcII$sp in particular).\nThis does not happen if the function is not a SAM.\nFrom discussion with @VladimirNik.",
            "url":"https://github.com/lampepfl/dotty/issues/1310"
          },
          {
            "number":1526,
            "title":"Make bin-script on-par with `scala` script",
            "bodyText":"The scala script has a larger amount of sophistication than our current ./bin/dotr. Help text from scala script:\nUsage: scala <options> [<script|class|object|jar> <arguments>]\n   or  scala -help\n\nAll options to scalac (see scalac -help) are also allowed.\n\nThe first given argument other than options to scala designates\nwhat to run.  Runnable targets are:\n\n  - a file containing scala source\n  - the name of a compiled class\n  - a runnable jar file with a valid Main-Class attribute\n  - or if no argument is given, the repl (interactive shell) is started\n\nOptions to scala which reach the java runtime:\n\n -Dname=prop  passed directly to java to set system properties\n -J<arg>      -J is stripped and <arg> passed to java as-is\n -nobootcp    do not put the scala jars on the boot classpath (slower)\n\nOther startup options:\n\n -howtorun    what to run <script|object|jar|guess> (default: guess)\n -i <file>    preload <file> before starting the repl\n -e <string>  execute <string> as if entered in the repl\n -save        save the compiled script in a jar for future use\n -nc          no compilation daemon: do not use the fsc offline compiler\n\nA file argument will be run as a scala script unless it contains only\nself-contained compilation units (classes and objects) and exactly one\nrunnable main method.  In that case the file will be compiled and the\nmain method invoked.  This provides a bridge between scripts and standard\nscala source.\n\nWhen running a script or using -e, an already running compilation daemon\n(fsc) is used, or a new one started on demand.  The -nc option can be\nused to prevent this.\n\nWith that being said what we'd actually like to do is to have main command with sub commands - think git or go.\nE.g. to compile you'd go:\n$ ./bin/dotc compile <ARGS>\n\nto launch an interactive repl you'd say:\n$ ./bin/dotc repl",
            "url":"https://github.com/lampepfl/dotty/issues/1526"
          },
          {
            "number":1589,
            "title":"Missing error messages",
            "bodyText":"We have a multitude of errors that need to be ported to the new scheme - you'll find these under \"Error Messages\" below. But first, a tutorial:\nHOWTO on creating new messages\nOnce you've identified an error you want to replace, you should decide what semantic information is needed in the message - i.e. the position, perhaps a tree or some types. For this example we're going to be implementing the error message for the following error:\ncase class Foo // you're not allowed to have a case class without a single parameter list!\nSo we create a file with this and compile it using ./bin/dotc test.scala. This gives us the error message:\ncase class Foo\n           ^\n           case class needs to have at least one parameter list\n\nSo now we search the repository for \"case class needs to have\" - I do this with git grep -n \"case class needs to have\".\nAnd now we find that in src/dotty/tools/dotc/ast/Desugar.scala we have the following line:\nctx.error(\"case class needs to have at least one parameter list\", cdef.pos)\nCool - now we know what to replace. So next step is to add a case class to src/dotty/tools/dotc/reporting/diagnostic/messages.scala. The case class that we add should extend Message:\nabstract class Message(val errorId: Int) {\n  /** The `msg` contains the diagnostic message e.g:\n    *\n    * > expected: String\n    * > found:    Int\n    *\n    * This message wil be placed underneath the position given by the enclosing\n    * `MessageContainer`\n    */\n  def msg: String\n\n  /** The kind of the error message is something like \"Syntax\" or \"Type\n    * Mismatch\"\n    */\n  def kind: String\n\n  /** The explanation should provide a detailed description of why the error\n    * occurred and use examples from the user's own code to illustrate how to\n    * avoid these errors.\n    */\n  def explanation: String\n  ...\n}\nNow we name our case class something useful and give it a unique errorId:\ncase class CaseClassMissingParamList() extends Message(4)\nSince we can see that the call to ctx.error took the position of a cdef: TypeDef, we could perhaps use this in the constructor of our Message?\ncase class CaseClassMissingParamList(cdef: untpd.TypeDef) extends Message(4)\nIt might also be that we're going to be manipulating cdef tree, as such we should pass a Context to get all the implicit operations:\ncase class CaseClassMissingParamList(cdef: untpd.TypeDef)(implicit ctx: Context)\nextends Message(4)\nAlright! Now we can start adding things to our Messsage:\ncase class CaseClassMissingParamList(cdef: untpd.TypeDef)(implicit ctx: Context)\nextends Message(4) {\n  val kind = \"Syntax\" // this will be shown as a delimiter: \"-- [E004] Syntax X -------\"\n\n  // we can use the \"hl\" interpolator to give syntax highlighting to our message:\n  val msg =\n    hl\"\"\"|A ${\"case class\"} must have at least one parameter list\"\"\"\n\n  // not everything that is interpolated will be highlighted, for instance you can use\n  // colors like: Red(\"must\") - this will get the red color.\n  val explanation =\n    hl\"\"\"|${cdef.name} ${Red(\"must\")} have at least one parameter list, if you would rather\n         |have a singleton representation of ${cdef.name}, use a \"${\"case object\"}\".\n         |Or, add an explicit `()' as a parameter list to ${cdef.name}.\"\"\".stripMargin\n}\nStable Identifier\nSo far, we've simplified the above cases a smidge, the error messages themselves actually don't extend Message by passing an integer. They should actually create an entry into the java enum defined in ErrorMessageID.java. This will enable us to have stable identifiers which helps tooling between the different compilers.\nNow you replace the call to ctx.error(String) with ctx.error(CaseClassMissingParamList(cdef)) - and you're done with the implementation!\nTests\nTo test your solution, add a test to ErrorMessagesTests.scala. An example for TypeMismatch is provided and documented.\nOnline documentation\nWe really want to have online documentation providing more detailed information on what went wrong. Currently the idea is to create markdown pages in the docs/docs folder. Any contribution here would be greatly appreciated!\nThings to keep in mind\n\nYou're creating a semantic object - this object will either be the output of the terminal or it could be used in an IDE, so make sure to include the relevant things. Typically: Types, Position, Tree\nName your error something easy to understand!\nIf you think your error doesn't need an explanation - that's fine - just put val explanation = \"\"\nIf you find yourself not being able to manipulate trees - do you have the implicit context?\n\"HALP!\" - please post in our gitter channel: https://gitter.im/lampepfl/dotty or comment on this issue ðŸ˜ƒ\n\nMissing Messages\nPlease comment below saying which messages you'd like to tackle.\nAvailable / Under way\n\nParsers.scala:2150\nParsers.scala:2257\nParsers.scala:2429\nParsers.scala:2447\nParsers.scala:2491\nScala2Unpickler.scala:681\nSymDenotations.scala:1924\nTypeAssigner.scala:35\nTypeAssigner.scala:196\nTypeAssigner.scala:223\nTypeAssigner.scala:287\nTypeAssigner.scala:300\nTypeAssigner.scala:302\nTypeAssigner.scala:339\nTypeAssigner.scala:341\nTypeAssigner.scala:357\nTypeAssigner.scala:359\nTypeAssigner.scala:399\nTypeAssigner.scala:433\nTypeAssigner.scala:548\nTyper.scala:393\nTyper.scala:862\nTyper.scala:985\nTyper.scala:990\nTyper.scala:992\nTyper.scala:1107\nTyper.scala:1427\nTyper.scala:1521\nTyper.scala:1555\nTyper.scala:1574\nTyper.scala:1898 (def missingArgs)\n\nContributors\n\n@abeln\n@AndrewZurn\n@b-studios\n@gvolpe\n@insdami\n@jarrodj\n@johnregan\n@jyotman94\n@ljdelight\n@lorandszakacs\n@m-sp\n@mads-hartmann\n@maseev\n@mikla\n@msosnicki\n@rubenpieters\n@sebastianharko\n@ShaneDelmore\n@thiagoandrade6",
            "url":"https://github.com/lampepfl/dotty/issues/1589"
          },
          {
            "number":1673,
            "title":"Documentation needs \"Getting started\" for users",
            "bodyText":"Docs page has \"Getting Started\" for contributors (http://dotty.epfl.ch/docs/), but should have one for users",
            "url":"https://github.com/lampepfl/dotty/issues/1673"
          },
          {
            "number":1854,
            "title":"repl output incomplete when entering multiple statements at once",
            "bodyText":"Scala 2:\nscala> class A; 1\ndefined class A\nres0: Int = 1\n\nscala>\ndotr:\nscala> class A; 1 \ndefined class A\nscala>",
            "url":"https://github.com/lampepfl/dotty/issues/1854"
          },
          {
            "number":1863,
            "title":"Should we have PR && issue templates?",
            "bodyText":"Github allows for us to define issue and PR templates that look something like this:\nhttps://github.com/redox-os/redox/blob/master/.github/ISSUE_TEMPLATE\nhttps://github.com/redox-os/redox/blob/master/.github/PULL_REQUEST_TEMPLATE\nIs this something we should have? Very low-hanging fruit for someone to pick up...",
            "url":"https://github.com/lampepfl/dotty/issues/1863"
          },
          {
            "number":1945,
            "title":"Dottydoc needs to be responsive",
            "bodyText":"The doc tool currently pretty much only supports desktop, since there are no rules for mobile devices.\nSince the documentation is using bootstrap 4, we should adapt to using its preferred method of handling reactive sizing.",
            "url":"https://github.com/lampepfl/dotty/issues/1945"
          },
          {
            "number":1961,
            "title":"Star `*` infix type fails compilation",
            "bodyText":"object InfixType {\n  trait *[N1, N2]\n  type Result = Int * Int\n}\n\nGives\n[error]   |  type Result = Int * Int\n[error]   |                    ^\n[error]   |                    ';' expected but identifier found",
            "url":"https://github.com/lampepfl/dotty/issues/1961"
          },
          {
            "number":2145,
            "title":"Annotations not extending scala.annotation.Annotation",
            "bodyText":"scalac accepts this, dotty requires A to extend scala.annotation.Annotation:\nclass A\n\nobject O {\n  @A def f = 1\n}",
            "url":"https://github.com/lampepfl/dotty/issues/2145"
          },
          {
            "number":2255,
            "title":"Automatically turn off colored output when not run in a terminal",
            "bodyText":"We should use the same detection mechanism now used by scalac: https://github.com/scala/scala/pull/5663/files#diff-54246962bf5d9d33d2a44254c9422eb3R157",
            "url":"https://github.com/lampepfl/dotty/issues/2255"
          },
          {
            "number":2560,
            "title":"Regression in #2465: blog pages get wrong date",
            "bodyText":"With the merge of timestamps, this broke something in the file parsing logic (haven't looked too close at it). But the result is:\n\nAll files now get the generated page's timestamp instead of the filename's.\ncc: @Varunram",
            "url":"https://github.com/lampepfl/dotty/issues/2560"
          },
          {
            "number":2615,
            "title":"Document literal singleton types",
            "bodyText":"The current best source of documentation is SIP-23 - Literal-based singleton types, it would be nice to have something on dotty.epfl.ch!",
            "url":"https://github.com/lampepfl/dotty/issues/2615"
          },
          {
            "number":2659,
            "title":"When opening a two-level deep documentation page, the sidebar is not fully expanded to show the page",
            "bodyText":"For example, in http://dotty.epfl.ch/docs/reference/adts.html the sidebar shows the \"Reference\" section expanded but not the \"Enums\" subsection, even though \"Algebraic Data Types\" is a page inside the \"Enums\" subsection.",
            "url":"https://github.com/lampepfl/dotty/issues/2659"
          },
          {
            "number":2662,
            "title":"Provide next page / previous page links in the documentation",
            "bodyText":"The reference section of the documentation is almost like a small book on Dotty, as such it would be nice if it could be navigated more like an online book, either with links at the bottom, or with giant arrows around the page like in https://doc.rust-lang.org/beta/book/second-edition/",
            "url":"https://github.com/lampepfl/dotty/issues/2662"
          },
          {
            "number":2684,
            "title":"Add embedded code examples dotty website",
            "bodyText":"Depends on: scalacenter/scastie#154\nWe would like to take some of the code examples from the documentation pages and put them into embedded views on the landing page.\nSomething like:\n\n Enums\n Union & Intersection types\n Trait Parameters\n\nwould be good to have examples of.",
            "url":"https://github.com/lampepfl/dotty/issues/2684"
          },
          {
            "number":2806,
            "title":"Latest version of dotty should be written down in a fixed place",
            "bodyText":"sbt-dotty currently has some complicated logic to try to guess the latest nightly build of dotty based on maven xml, but it's hardcoded to dotty_0.2 (and was previously hardcoded to dotty_0.1). Users that want to  know what the latest version of dotty is also have to look at maven and scroll through a bunch of versions. It would be easier for everyone if we had something like:\nFetching http://dotty.epfl.ch/last-stable returns the string \"0.1.2-RC1\" (until we have a real stable release).\nFetching http://dotty.epfl.ch/last-rc returns the string \"0.1.2-RC1\".\nFetching http://dotty.epfl.ch/last-nightly returns the string \"0.2.0-bin-20170622-7381e9d-NIGHTLY\".\nThis could be done by the CI when the site is generated.",
            "url":"https://github.com/lampepfl/dotty/issues/2806"
          },
          {
            "number":2961,
            "title":"The slogan can not be seen in the default zoom ratio on the home page",
            "bodyText":"Default:\n\n80%:\n\n50:",
            "url":"https://github.com/lampepfl/dotty/issues/2961"
          },
          {
            "number":2966,
            "title":"Add `.exceptionally` to pool submission in Vulpix",
            "bodyText":"Vulpix submits runnables to a thread pool in ParallelTesting.scala. These submissions generate futures which do not have an exception handler.\nBy doing .exceptionally we could add handlers for these. This would be useful for not foregoing any stacktraces that might be lost.",
            "url":"https://github.com/lampepfl/dotty/issues/2966"
          },
          {
            "number":2967,
            "title":"Adapt vulpix to SAM types",
            "bodyText":"When moving to >= 2.12 after #2827 is merged, we can make vulpix use SAM types instead of doing things like:\nnew Runnable { ... } we can do () => { ... }.",
            "url":"https://github.com/lampepfl/dotty/issues/2967"
          },
          {
            "number":3007,
            "title":"Implement initial and cleanup commands as well as value bindings for REPL",
            "bodyText":"https://github.com/dotty-staging/dotty/blob/812f141ba97e224168fc3bf91a6401c5dd349ce8/sbt-bridge/src/xsbt/ConsoleInterface.scala#L22-L39",
            "url":"https://github.com/lampepfl/dotty/issues/3007"
          },
          {
            "number":3008,
            "title":"Account for `@showAsInfix` in `isInfixType`",
            "bodyText":"This TODO\nhttps://github.com/scala/scala/blob/v2.12.3/src/library/scala/annotation/showAsInfix.scala",
            "url":"https://github.com/lampepfl/dotty/issues/3008"
          },
          {
            "number":3166,
            "title":"Scastie code snippet for dotty.epfl.ch ",
            "bodyText":"Similarly to scala-lang, we would like to add a Scastie embedding on the front page of dotty.epfl.ch. Please share what you think should be the content of this snippet.\nHere are some guidelines:\n\nThe code snippet should be relatively small (18 lines of code or less).\nIt should include Dotty specific features (e.g. enum).",
            "url":"https://github.com/lampepfl/dotty/issues/3166"
          }
        ]
      }
    }
  }
}