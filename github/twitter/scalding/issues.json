{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":670,
            "title":"use counters to track cache-hit-rate in MapsideReduce",
            "bodyText":"useful for tuning the size",
            "url":"https://github.com/twitter/scalding/issues/670"
          },
          {
            "number":746,
            "title":"Show an example of shapeless records + TypedAPI",
            "bodyText":"Any takers want to make give us an example to get people to see that records can be as easy as the Fields API?\nhttps://github.com/milessabin/shapeless",
            "url":"https://github.com/twitter/scalding/issues/746"
          },
          {
            "number":781,
            "title":"add the fix to the HBase tap.",
            "bodyText":"https://github.com/Cascading/maple/pull/20/files",
            "url":"https://github.com/twitter/scalding/issues/781"
          },
          {
            "number":882,
            "title":"Add some default hadoop counters",
            "bodyText":"cascading adds a few default counters, but we could add some more.\nFor instance hit-count of the map-side cache for commutative semigroups. Helps in tuning the cache size, but there might be others.",
            "url":"https://github.com/twitter/scalding/issues/882"
          },
          {
            "number":947,
            "title":"Implement sketch inner join, where both sides are sketch",
            "bodyText":"If both sides of a join are skewed, or you want to do a self join, the Sketched cannot handle that.\nIt would be nice to support these cases.",
            "url":"https://github.com/twitter/scalding/issues/947"
          },
          {
            "number":998,
            "title":"The ExecutionTest with Kmeans is flakey",
            "bodyText":"The law written is only true with high probability, so it sometimes fails.\nNeed to fix this to denoise the tests.",
            "url":"https://github.com/twitter/scalding/issues/998"
          },
          {
            "number":1068,
            "title":"Add counters to see stdev of values per key",
            "bodyText":"If on every reduce operation or join we counted the number of values for the key (say N_v), and then incremented a counter by N_v^2, then since map-reduce gives the number of groups, and the number of input and output records, we could compute the standard deviation of the (values per key). If we compare that to the mean of (values per key) we get some idea of the skew. I don't think we would overflow a long counter with this, in most cases, but it is possible (probably we can't directly compute the third standard moment, which is more directly skew), but I think the stdev might be enough in most cases.\nWe probably want the incoming skew and the outgoing skew. For standard sums/reduces/folds, the outgoing stdev should be 0 since each key has one value.",
            "url":"https://github.com/twitter/scalding/issues/1068"
          },
          {
            "number":1075,
            "title":"sbt test fails on my machine",
            "bodyText":"I was following the \"Getting Started\" section in the wiki. When I tried to run sbt test, it gave me a bunch of errors and failed.\n[error] error while loading CharSequence, class file '/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar(java/lang/CharSequence.class)' is broken\n[error] (bad constant pool tag 18 at byte 10)\n[error] error while loading Comparator, class file '/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar(java/util/Comparator.class)' is broken\n[error] (bad constant pool tag 18 at byte 20)\n[error] two errors found\n[info] Compiling 8 Scala sources to /home/ubuntu/work/scalding/scalding-date/target/scala-2.9.3/classes...\n[error] error while loading CharSequence, class file '/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar(java/lang/CharSequence.class)' is broken\n[error] (bad constant pool tag 18 at byte 10)\n[error] error while loading Comparator, class file '/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar(java/util/Comparator.class)' is broken\n[error] (bad constant pool tag 18 at byte 20)\n[error] /home/ubuntu/work/scalding/scalding-date/src/main/scala/com/twitter/scalding/AbsoluteDuration.scala:166: could not find implicit value for parameter num: Numeric[Double]\n[error]   override def toSeconds = parts.map{ _.toSeconds }.sum\n[error]                                                     ^\n[error] /home/ubuntu/work/scalding/scalding-date/src/main/scala/com/twitter/scalding/AbsoluteDuration.scala:167: could not find implicit value for parameter num: Numeric[Long]\n[error]   override def toMillisecs: Long = parts.map{ _.toMillisecs }.sum\n[error]                                                               ^\n[error] /home/ubuntu/work/scalding/scalding-date/src/main/scala/com/twitter/scalding/DateOps.scala:50: overloaded method value replace with alternatives:\n[error]   (java.lang.CharSequence,java.lang.CharSequence)java.lang.String <and>\n[error]   (Char,Char)java.lang.String\n[error]  cannot be applied to (java.lang.String, java.lang.String)\n[error]     str.replace(\"T\", \" \") //We allow T to separate dates and times, just remove it and then validate\n[error]         ^\n[error] /home/ubuntu/work/scalding/scalding-date/src/main/scala/com/twitter/scalding/DateOps.scala:57: type mismatch;\n[error]  found   : String\n[error]  required: java.lang.CharSequence\n[error]     DATE_FORMAT_VALIDATORS.find{ _._2.findFirstIn(prepare(s)).isDefined }.map(_._1)\n[error]                                                          ^\n[error] error while loading Pattern, class file '/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar(java/util/regex/Pattern.class)' is broken\n[error] (bad constant pool tag 18 at byte 1753)\n[error] 7 errors found\n\nThe same set of errors were thrown when I tried to run sbt test in the cassovary source code.I felt that maybe my version of java isn't the right one and install Java7. After that sbt test in cassovary worked but the same errors persist in scalding. Am I doing something wrong here?",
            "url":"https://github.com/twitter/scalding/issues/1075"
          },
          {
            "number":1120,
            "title":"We should scan the code for cases we can use AnyVal for ",
            "bodyText":"Serialization wins and such",
            "url":"https://github.com/twitter/scalding/issues/1120"
          },
          {
            "number":1227,
            "title":"Are the numbers accurate for HLL size",
            "bodyText":"In https://github.com/twitter/scalding/blob/develop/scalding-core/src/main/scala/com/twitter/scalding/ReduceOperations.scala#L94, it says that 10% error takes 256 bytes. But m=(104/error)^2=(104/10)^2=10.4^2=108 bytes",
            "url":"https://github.com/twitter/scalding/issues/1227"
          },
          {
            "number":1247,
            "title":"Deprecate or warn against using the weakly typed `source` function in `JobTest`",
            "bodyText":"JobTest provides two source methods:\n-- Weakly typed version\nï»¿def source(s: Source, iTuple: Iterable[Product]): JobTest\n\n-- Strongly typed version\ndef source[T](s: Source, iTuple: Iterable[T])(implicit setter: TupleSetter[T]): JobTest\nI just debugged a failing test with @nathantchan where he was accidentally using the weakly typed source method, causing a ClassCastException and then when we switched to the strongly typed source method the problem disappeared.\nI'm recommending that we minimally deprecate or warn when the user accidentally picks up the weakly typed source method to avoid these sorts of errors and eventually remove it.",
            "url":"https://github.com/twitter/scalding/issues/1247"
          }
        ]
      }
    }
  }
}