{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":77,
            "title":"Migrate scripted tests that use build.sbt",
            "bodyText":"See the thread starting from sbt#73 (comment).",
            "url":"https://github.com/sbt/zinc/issues/77"
          },
          {
            "number":84,
            "title":"Scripted doesn't support multiprojects",
            "bodyText":"This doesn't let us test multi-project support in incremental compiler.\nMaybe the solution would be to port such tests to be a plain code that calls into IncHandler directly?",
            "url":"https://github.com/sbt/zinc/issues/84"
          },
          {
            "number":119,
            "title":"Don't publish repositories information (at least for releases)",
            "bodyText":"Remove all additional resolvers from build.sbt, at least for releases, because artifacts published to Maven central repository should not contain additional repositories, and in fact don't need them because all dependencies are already in Maven central repo.",
            "url":"https://github.com/sbt/zinc/issues/119"
          },
          {
            "number":123,
            "title":"ArrayStoreException when parsing Java annotation",
            "bodyText":"sbt/sbt#756\n@dotta wrote:\n\nAlright, I actually found a way to reproduce this! (Using sbt 0.13.0)\n\n\nClone https://github.com/dotta/sbt-issue-756 and checkout commit dotta/sbt-issue-756@ddc49b2\n\n\nStart sbt console and then ~test. Compilation should succeed.\n\n\nApply this commit dotta/sbt-issue-756@6c8ffef\n\n\nYou would expect compilation to fail, but it doesn't!\nTo make it fail, you need to clean first.",
            "url":"https://github.com/sbt/zinc/issues/123"
          },
          {
            "number":154,
            "title":"Port the test for warning on transitive macro recompilation, with opt-out",
            "bodyText":"See sbt/sbt#2659. I failed to figure out how to do so in #143.",
            "url":"https://github.com/sbt/zinc/issues/154"
          },
          {
            "number":299,
            "title":"Run Zinc server in the background on a Windows environment",
            "bodyText":"Please add a built-in method to run Zinc server in the background on a Windows environment, preferably with an option to start the server on Windows login (say, a service).\nMy current workaround is quite messy; I have one .bat which runs the server via Git Bash (using the Unix command to start the server), and then another .bat which calls the first .bat from Windows startup directory, which leaves an open cmd window at the end (couldn't work around that).",
            "url":"https://github.com/sbt/zinc/issues/299"
          },
          {
            "number":332,
            "title":"Bring back sbt-header",
            "bodyText":"sbt-header was removed in #323",
            "url":"https://github.com/sbt/zinc/issues/332"
          },
          {
            "number":337,
            "title":"Document how to clean only the analysis file of Zinc",
            "bodyText":"This is a ticket for the Scala Center spree happening at Scala Wave (Gdansk, Poland).\nThe sbt docs do not document the fact that sbt allows you to remove the analysis file in Zinc, without forcing other tasks like dependency resolution to kick in.\nUsually, what people do is to run clean in the root and that means that the next time they compile, dependencies will be resolved and checked, and other tasks that were before cached need to be executed.\nHowever, what most of people don't know, and what the docs don't say, is that if you execute compile / clean, only the analysis file will be removed.\nThe goal of this ticket is to clearly document this in the sbt docs linked at the beginning of this ticket. The docs are in the following repo.\nBy doing this, you will help the community in two regards:\n\nYou will help to clear up a common source of confusion.\nThe documentation can make people's habits more efficient -- less resolution, more time to have coffee or code!\n\nContributing to docs is an important task for OSS projects, and it's really appreciated.",
            "url":"https://github.com/sbt/zinc/issues/337"
          },
          {
            "number":338,
            "title":"Improve the invalidation logs of Zinc",
            "bodyText":"The current invalidation logs for Zinc are pretty ugly and could be formatted to be easier to understand.\nWhy is this an important issue? Working on the infrastructure around logging is important so that sbt and other build tools can diagnose issues with it in the most effective, straightforward way. We're not enabling this use case as much as we can, so far.\nThe goal of this ticket is to make them easier to read: whether that is vertical formatting, colors or better messages doesn't matter and it's up to the contributor that takes this up to decide.\nThe best way to see the current state is to run scripted, disabling buffer log (in the build sbt), and then choosing a random scripted test and making sure that there is an incOptions.properties file in the root with:\napiDebug = true\nrelationsDebug = true\n\nA test that already has this information is value-class-underlying.\nIf you want to see the logs produced by Zinc within sbt, you can do logLevel in aConcreteProject := Level.Debug where aConcreteProject is the place you want to test it on. That can be executed with set in the shell too, so that you don't have to reload the build.",
            "url":"https://github.com/sbt/zinc/issues/338"
          },
          {
            "number":343,
            "title":"The java compiler should always be run",
            "bodyText":"This is a port of sbt/sbt#1178.\nCompile mixed order runs first the scala compiler, using the java parser to read java symbols, and then executes the java compiler with the class files that have been generated by the scala compiler.\n@dragos complained that Scala's Java parser is not 100% compatible and some tools do not report Java parser errors coming from the Scala compiler (like Scala IDE). Therefore, to get these errors in a reliable way, we always have to run the java compiler (from the jdk) even if scala fails. More details are in the original ticket.\nThe place to fix this issue is probably https://github.com/sbt/zinc/blob/d253375c3250eacb76864792d8047ede32ad5503/internal/zinc-core/src/main/scala/sbt/internal/inc/Compile.scala or the classes it calls. Tests can be added in the zincCore project.\nAs there are no error messages shown to the user, I'm labeling this as a bug.",
            "url":"https://github.com/sbt/zinc/issues/343"
          },
          {
            "number":369,
            "title":"Cached doc is not using Tracked.outputChanged",
            "bodyText":"Related to sbt/util#79\nI noticed that cached doc in https://github.com/sbt/zinc/blob/1.0/zinc-compile/src/main/scala/sbt/inc/Doc.scala is not using Tracked.outputChanged.\nThe fix could wait post RC-1",
            "url":"https://github.com/sbt/zinc/issues/369"
          }
        ]
      }
    }
  }
}