<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>au.com.dius</groupId>
  <artifactId>pact-jvm-consumer-groovy_2.12</artifactId>
  <version>3.5.4-rc.1</version>
  <name>pact-jvm-consumer-groovy_2.12</name>
  <description>pact-jvm-consumer-groovy
=========================

Groovy DSL for Pact JVM

## Dependency

The library is available on maven central using:

* group-id = `au.com.dius`
* artifact-id = `pact-jvm-consumer-groovy_2.11`
* version-id = `3.5.x`

## Usage

Add the `pact-jvm-consumer-groovy` library to your test class path. This provides a `PactBuilder` class for you to use
to define your pacts. For a full example, have a look at the example JUnit `ExampleGroovyConsumerPactTest`.

If you are using gradle for your build, add it to your `build.gradle`:

    dependencies {
        testCompile &amp;apos;au.com.dius:pact-jvm-consumer-groovy_2.11:3.5.0&amp;apos;
    }

Then create an instance of the `PactBuilder` in your test.

```groovy
    import au.com.dius.pact.consumer.PactVerificationResult
    import au.com.dius.pact.consumer.groovy.PactBuilder
    import groovyx.net.http.RESTClient
    import org.junit.Test

    class AliceServiceConsumerPactTest {

        @Test
        void &amp;quot;A service consumer side of a pact goes a little something like this&amp;quot;() {

            def alice_service = new PactBuilder() // Create a new PactBuilder
            alice_service {
                serviceConsumer &amp;quot;Consumer&amp;quot; 	// Define the service consumer by name
                hasPactWith &amp;quot;Alice Service&amp;quot;   // Define the service provider that it has a pact with
                port 1234                       // The port number for the service. It is optional, leave it out to
                                                // to use a random one

                given(&amp;apos;there is some good mallory&amp;apos;) // defines a provider state. It is optional.
                uponReceiving(&amp;apos;a retrieve Mallory request&amp;apos;) // upon_receiving starts a new interaction
                withAttributes(method: &amp;apos;get&amp;apos;, path: &amp;apos;/mallory&amp;apos;)		// define the request, a GET request to &amp;apos;/mallory&amp;apos;
                willRespondWith(						// define the response we want returned
                    status: 200,
                    headers: [&amp;apos;Content-Type&amp;apos;: &amp;apos;text/html&amp;apos;],
                    body: &amp;apos;&amp;quot;That is some good Mallory.&amp;quot;&amp;apos;
                )
            }

            // Execute the run method to have the mock server run.
            // It takes a closure to execute your requests and returns a PactVerificationResult.
            PactVerificationResult result = alice_service.runTest {
                def client = new RESTClient(&amp;apos;http://localhost:1234/&amp;apos;)
                def alice_response = client.get(path: &amp;apos;/mallory&amp;apos;)

                assert alice_response.status == 200
                assert alice_response.contentType == &amp;apos;text/html&amp;apos;

                def data = alice_response.data.text()
                assert data == &amp;apos;&amp;quot;That is some good Mallory.&amp;quot;&amp;apos;
            }
            assert result == PactVerificationResult.Ok.INSTANCE  // This means it is all good

        }
    }
```

After running this test, the following pact file is produced:

    {
      &amp;quot;provider&amp;quot; : {
        &amp;quot;name&amp;quot; : &amp;quot;Alice Service&amp;quot;
      },
      &amp;quot;consumer&amp;quot; : {
        &amp;quot;name&amp;quot; : &amp;quot;Consumer&amp;quot;
      },
      &amp;quot;interactions&amp;quot; : [ {
        &amp;quot;provider_state&amp;quot; : &amp;quot;there is some good mallory&amp;quot;,
        &amp;quot;description&amp;quot; : &amp;quot;a retrieve Mallory request&amp;quot;,
        &amp;quot;request&amp;quot; : {
          &amp;quot;method&amp;quot; : &amp;quot;get&amp;quot;,
          &amp;quot;path&amp;quot; : &amp;quot;/mallory&amp;quot;,
          &amp;quot;requestMatchers&amp;quot; : { }
        },
        &amp;quot;response&amp;quot; : {
          &amp;quot;status&amp;quot; : 200,
          &amp;quot;headers&amp;quot; : {
            &amp;quot;Content-Type&amp;quot; : &amp;quot;text/html&amp;quot;
          },
          &amp;quot;body&amp;quot; : &amp;quot;That is some good Mallory.&amp;quot;,
          &amp;quot;responseMatchers&amp;quot; : { }
        }
      } ]
    }

### DSL Methods

#### serviceConsumer(String consumer)

This names the service consumer for the pact.

#### hasPactWith(String provider)

This names the service provider for the pact.

#### port(int port)

Sets the port that the mock server will run on. If not supplied, a random port will be used.

#### given(String providerState)

Defines a state that the provider needs to be in for the request to succeed. For more info, see
https://github.com/realestate-com-au/pact/wiki/Provider-states. Can be called multiple times.

#### given(String providerState, Map params)

Defines a state that the provider needs to be in for the request to succeed. For more info, see
https://github.com/realestate-com-au/pact/wiki/Provider-states. Can be called multiple times, and the params
map can contain the data required for the state.

#### uponReceiving(String requestDescription)

Starts the definition of a of a pact interaction.

#### withAttributes(Map requestData)

Defines the request for the interaction. The request data map can contain the following:

| key                           |  Description                               | Default Value             |
|----------------------------|-------------------------------------------|-----------------------------|
| method | The HTTP method to use | get |
| path | The Path for the request | / |
| query | Query parameters as a Map&amp;lt;String, List&amp;gt; |  |
| headers | Map of key-value pairs for the request headers | |
| body | The body of the request. If it is not a string, it will be converted to JSON. Also accepts a PactBodyBuilder. | |
| prettyPrint | Boolean value to control if the body is pretty printed. See note on Pretty Printed Bodies below |

For the path, header attributes and query parameters (version 2.2.2+ for headers, 3.3.7+ for query parameters), 
you can use regular expressions to match. You can either provide a regex `Pattern` class or use the `regexp` method 
to construct a `RegexpMatcher` (you can use any of the defined matcher methods, see DSL methods below).
If you use a `Pattern`, or the `regexp` method but don&amp;apos;t provide a value, a random one will be generated from the
regular expression. This value is used when generating requests.

For example:

```groovy
    .withAttributes(path: ~&amp;apos;/transaction/[0-9]+&amp;apos;) // This will generate a random path for requests

    // or

    .withAttributes(path: regexp(&amp;apos;/transaction/[0-9]+&amp;apos;, &amp;apos;/transaction/1234567890&amp;apos;))
```

#### withBody(Closure closure)

Constructs the body of the request or response by invoking the supplied closure in the context of a PactBodyBuilder.

##### Pretty Printed Bodies [Version 2.2.15+, 3.0.4+]

An optional Map can be supplied to control how the body is generated. The option values are available:

| Option | Description |
|--------|-------------|
| mimeType | The mime type of the body. Defaults to `application/json` |
| prettyPrint | Boolean value controlling whether to pretty-print the body or not. Defaults to true |

If the prettyPrint option is not specified, the bodies will be pretty printed unless the mime type corresponds to one
 that requires compact bodies. Currently only `application/x-thrift+json` is classed as requiring a compact body.

For an example of turning off pretty printing:

```groovy
service {
    uponReceiving(&amp;apos;a request&amp;apos;)
    withAttributes(method: &amp;apos;get&amp;apos;, path: &amp;apos;/&amp;apos;)
    withBody(prettyPrint: false) {
      name &amp;apos;harry&amp;apos;
      surname &amp;apos;larry&amp;apos;
    }
}
```

#### willRespondWith(Map responseData)

Defines the response for the interaction. The response data map can contain the following:

| key                           |  Description                               | Default Value             |
|----------------------------|-------------------------------------------|-----------------------------|
| status | The HTTP status code to return | 200 |
| headers | Map of key-value pairs for the response headers | |
| body | The body of the response. If it is not a string, it will be converted to JSON. Also accepts a PactBodyBuilder. | |
| prettyPrint | Boolean value to control if the body is pretty printed. See note on Pretty Printed Bodies above |

For the headers (version 2.2.2+), you can use regular expressions to match. You can either provide a regex `Pattern` class or use
the `regexp` method to construct a `RegexpMatcher` (you can use any of the defined matcher methods, see DSL methods below).
If you use a `Pattern`, or the `regexp` method but don&amp;apos;t provide a value, a random one will be generated from the
regular expression. This value is used when generating responses.

For example:

```groovy
    .willRespondWith(headers: [LOCATION: ~&amp;apos;/transaction/[0-9]+&amp;apos;]) // This will generate a random location value

    // or

    .willRespondWith(headers: [LOCATION: regexp(&amp;apos;/transaction/[0-9]+&amp;apos;, &amp;apos;/transaction/1234567890&amp;apos;)])
```

#### PactVerificationResult runTest(Closure closure)

The `runTest` method starts the mock server, and then executes the provided closure. It then returns the pact verification
result for the pact run. If you require access to the mock server configuration for the URL, it is passed into the
closure, e.g.,

```groovy

PactVerificationResult result = alice_service.runTest() { mockServer -&amp;gt;
  def client = new RESTClient(mockServer.url)
  def alice_response = client.get(path: &amp;apos;/mallory&amp;apos;)
}
```

### Body DSL

For building JSON bodies there is a `PactBodyBuilder` that provides as DSL that includes matching with regular expressions
and by types. For a more complete example look at `PactBodyBuilderTest`.

For an example:

```groovy
service {
    uponReceiving(&amp;apos;a request&amp;apos;)
    withAttributes(method: &amp;apos;get&amp;apos;, path: &amp;apos;/&amp;apos;)
    withBody {
      name(~/\w+/, &amp;apos;harry&amp;apos;)
      surname regexp(~/\w+/, &amp;apos;larry&amp;apos;)
      position regexp(~/staff|contractor/, &amp;apos;staff&amp;apos;)
      happy(true)
    }
}
```

This will return the following body:

```json
{
       &amp;quot;name&amp;quot;: &amp;quot;harry&amp;quot;,
       &amp;quot;surname&amp;quot;: &amp;quot;larry&amp;quot;,
       &amp;quot;position&amp;quot;: &amp;quot;staff&amp;quot;,
       &amp;quot;happy&amp;quot;: true
}
```

and add the following matchers:

```json
{
    &amp;quot;$.body.name&amp;quot;: {&amp;quot;regex&amp;quot;: &amp;quot;\\w+&amp;quot;},
    &amp;quot;$.body.surname&amp;quot;: {&amp;quot;regex&amp;quot;: &amp;quot;\\w+&amp;quot;},
    &amp;quot;$.body.position&amp;quot;: {&amp;quot;regex&amp;quot;: &amp;quot;staff|contractor&amp;quot;}
}
```

#### DSL Methods

The DSL supports the following matching methods:

* regexp(Pattern re, String value = null), regexp(String regexp, String value = null)

Defines a regular expression matcher. If the value is not provided, a random one will be generated.

* hexValue(String value = null)

Defines a matcher that accepts hexidecimal values. If the value is not provided, a random hexidcimal value will be
generated.

* identifier(def value = null)

Defines a matcher that accepts integer values.  If the value is not provided, a random value will be generated.

* ipAddress(String value = null)

Defines a matcher that accepts IP addresses.  If the value is not provided, a 127.0.0.1 will be used.

* numeric(Number value = null)

Defines a matcher that accepts any numerical values. If the value is not provided, a random integer will be used.

* integer(def value = null)

Defines a matcher that accepts any integer values. If the value is not provided, a random integer will be used.

* decimal(def value = null)

Defines a matcher that accepts any decimal numbers. If the value is not provided, a random decimal will be used.

* timestamp(String pattern = null, def value = null)

If pattern is not provided the ISO_DATETIME_FORMAT is used (&amp;quot;yyyy-MM-dd&amp;apos;T&amp;apos;HH:mm:ss&amp;quot;) . If the value is not provided, the current date and time is used.

* time(String pattern = null, def value = null)

If pattern is not provided the ISO_TIME_FORMAT is used (&amp;quot;&amp;apos;T&amp;apos;HH:mm:ss&amp;quot;) . If the value is not provided, the current date and time is used.

* date(String pattern = null, def value = null)

If pattern is not provided the ISO_DATE_FORMAT is used (&amp;quot;yyyy-MM-dd&amp;quot;) . If the value is not provided, the current date and time is used.

* uuid(String value = null)

Defines a matcher that accepts UUIDs. A random one will be generated if no value is provided.

* equalTo(def value)

Defines an equality matcher that always matches the provided value using `equals`. This is useful for resetting cascading
type matchers.

* includesStr(def value)

Defines a matcher that accepts any value where its string form includes the provided string.

* nullValue()

Defines a matcher that accepts only null values.

#### What if a field matches a matcher name in the DSL?

When using the body DSL, if there is a field that matches a matcher name (e.g. a field named &amp;apos;date&amp;apos;) then you can do the following:

```groovy
  withBody {
    date = date()
  }
```

### Ensuring all items in a list match an example (2.2.0+)

Lots of the time you might not know the number of items that will be in a list, but you want to ensure that the list
has a minimum or maximum size and that each item in the list matches a given example. You can do this with the `eachLike`,
`minLike` and `maxLike` functions.

| function | description |
|----------|-------------|
| `eachLike()` | Ensure that each item in the list matches the provided example |
| `maxLike(integer max)` | Ensure that each item in the list matches the provided example and the list is no bigger than the provided max |
| `minLike(integer min)` | Ensure that each item in the list matches the provided example and the list is no smaller than the provided min |

For example:

```groovy
    withBody {
        users minLike(1) {
            id identifier
            name string(&amp;apos;Fred&amp;apos;)
        }
    }
```

This will ensure that the user list is never empty and that each user has an identifier that is a number and a name that is a string.

__Version 3.2.4/2.4.6+__ You can specify the number of example items to generate in the array. The default is 1.

```groovy
    withBody {
        users minLike(1, 3) {
            id identifier
            name string(&amp;apos;Fred&amp;apos;)
        }
    }
```

This will create an example user list with 3 users.

__Version 3.2.13/2.4.14+__ The each like matchers have been updated to work with primitive types.

```groovy
withBody {
        permissions eachLike(3, &amp;apos;GRANT&amp;apos;)
}
```

will generate the following JSON

```json
{
    &amp;quot;permissions&amp;quot;: [&amp;quot;GRANT&amp;quot;, &amp;quot;GRANT&amp;quot;, &amp;quot;GRANT&amp;quot;]
}
```

and matchers

```json
{
    &amp;quot;$.body.permissions&amp;quot;: {&amp;quot;match&amp;quot;: &amp;quot;type&amp;quot;}
}
```

and now you can even get more fancy

```groovy
withBody {
        permissions eachLike(3, regexp(~/\w+/))
        permissions2 minLike(2, 3, integer())
        permissions3 maxLike(4, 3, ~/\d+/)
}
```

### Matching any key in a map (3.3.1/2.5.0+)

The DSL has been extended for cases where the keys in a map are IDs. For an example of this, see 
[#313](https://github.com/DiUS/pact-jvm/issues/131). In this case you can use the `keyLike` method, which takes an 
example key as a parameter.

For example:

```groovy
withBody {
  example {
    one {
      keyLike &amp;apos;001&amp;apos;, &amp;apos;value&amp;apos;            // key like an id mapped to a value
    }
    two {
      keyLike &amp;apos;ABC001&amp;apos;, regexp(&amp;apos;\\w+&amp;apos;)  // key like an id mapped to a matcher
    }
    three {
      keyLike &amp;apos;XYZ001&amp;apos;, {               // key like an id mapped to a closure
        id identifier()
      }
    }
    four {
      keyLike &amp;apos;001XYZ&amp;apos;, eachLike {      // key like an id mapped to an array where each item is matched by the following 
        id identifier()                 // example
      }
    }  
  }
}
```

For an example, have a look at [WildcardPactSpec](src/test/au/com/dius/pact/consumer/groovy/WildcardPactSpec.groovy).

**NOTE:** The `keyLike` method adds a `*` to the matching path, so the matching definition will be applied to all keys
 of the map if there is not a more specific matcher defined for a particular key. Having more than one `keyLike` condition
 applied to a map will result in only one being applied when the pact is verified (probably the last).

### Matching with an OR (3.5.0+)

The V3 spec allows multiple matchers to be combined using either AND or OR for a value. The main use of this would be to
 either be able to match a value or a null, or to combine different matchers.
 
For example:

```groovy
    withBody {
        valueA and(&amp;apos;AB&amp;apos;, includeStr(&amp;apos;A&amp;apos;), includeStr(&amp;apos;B&amp;apos;)) // valueA must include both A and B
        valueB or(&amp;apos;100&amp;apos;, regex(~/\d+/), nullValue()) // valueB must either match a regular expression or be null
        valueC or(&amp;apos;12345678&amp;apos;, regex(~/\d{8}/), regex(~/X\d{13}/)) // valueC must match either 8 or X followed by 13 digits 
    }
```

## Changing the directory pact files are written to (2.1.9+)

By default, pact files are written to `target/pacts`, but this can be overwritten with the `pact.rootDir` system property.
This property needs to be set on the test JVM as most build tools will fork a new JVM to run the tests.

For Gradle, add this to your build.gradle:

```groovy
test {
    systemProperties[&amp;apos;pact.rootDir&amp;apos;] = &amp;quot;$buildDir/pacts&amp;quot;
}
```

# Publishing your pact files to a pact broker

If you use Gradle, you can use the [pact Gradle plugin](https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-gradle#publishing-pact-files-to-a-pact-broker) to publish your pact files.

# Pact Specification V3

Version 3 of the pact specification changes the format of pact files in the following ways:

* Query parameters are stored in a map form and are un-encoded (see [#66](https://github.com/DiUS/pact-jvm/issues/66)
and [#97](https://github.com/DiUS/pact-jvm/issues/97) for information on what this can cause).
* Introduces a new message pact format for testing interactions via a message queue.
* Multiple provider states can be defined with data parameters.

## Generating V3 spec pact files (3.1.0+, 2.3.0+)

To have your consumer tests generate V3 format pacts, you can pass an option into the `runTest` method. For example:

```groovy
PactVerificationResult result = service.runTest(specificationVersion: PactSpecVersion.V3) { config -&amp;gt;
  def client = new RESTClient(config.url)
  def response = client.get(path: &amp;apos;/&amp;apos;)
}
```

## Consumer test for a message consumer

For testing a consumer of messages from a message queue, the `PactMessageBuilder` class provides a DSL for defining
your message expectations. It works in much the same way as the `PactBuilder` class for Request-Response interactions,
but will generate a V3 format message pact file.

The following steps demonstrate how to use it.

### Step 1 - define the message expectations

Create a test that uses the `PactMessageBuilder` to define a message expectation, and then call `run`. This will invoke
the given closure with a message for each one defined in the pact.

```groovy
def eventStream = new PactMessageBuilder().call {
    serviceConsumer &amp;apos;messageConsumer&amp;apos;
    hasPactWith &amp;apos;messageProducer&amp;apos;

    given &amp;apos;order with id 10000004 exists&amp;apos;

    expectsToReceive &amp;apos;an order confirmation message&amp;apos;
    withMetaData(type: &amp;apos;OrderConfirmed&amp;apos;) // Can define any key-value pairs here
    withContent(contentType: &amp;apos;application/json&amp;apos;) {
        type &amp;apos;OrderConfirmed&amp;apos;
        audit {
            userCode &amp;apos;messageService&amp;apos;
        }
        origin &amp;apos;message-service&amp;apos;
        referenceId &amp;apos;10000004-2&amp;apos;
        timeSent: &amp;apos;2015-07-22T10:14:28+00:00&amp;apos;
        value {
            orderId &amp;apos;10000004&amp;apos;
            value &amp;apos;10.000000&amp;apos;
            fee &amp;apos;10.00&amp;apos;
            gst &amp;apos;15.00&amp;apos;
        }
    }
}
```

### Step 2 - call your message handler with the generated messages

This example tests a message handler that gets messages from a Kafka topic. In this case the Pact message is wrapped
as a Kafka `MessageAndMetadata`.

```groovy
eventStream.run { Message message -&amp;gt;
    messageHandler.handleMessage(new MessageAndMetadata(&amp;apos;topic&amp;apos;, 1,
        new kafka.message.Message(message.contentsAsBytes()), 0, null, valueDecoder))
}
```

### Step 3 - validate that the message was handled correctly

```groovy
def order = orderRepository.getOrder(&amp;apos;10000004&amp;apos;)
assert order.status == &amp;apos;confirmed&amp;apos;
assert order.value == 10.0
```

### Step 4 - Publish the pact file

If the test was successful, a pact file would have been produced with the message from step 1.
</description>
  <url>https://github.com/DiUS/pact-jvm</url>
  <licenses>
    <license>
      <name>Apache 2</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <developers>
    <developer>
      <id>thetrav</id>
      <name>Travis Dixon</name>
      <email>the.trav@gmail.com</email>
    </developer>
    <developer>
      <id>rholshausen</id>
      <name>Ronald Holshausen</name>
      <email>rholshausen@dius.com.au</email>
    </developer>
  </developers>
  <scm>
    <connection>https://github.com/DiUS/pact-jvm.git</connection>
    <url>https://github.com/DiUS/pact-jvm</url>
  </scm>
  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jre8</artifactId>
      <version>1.1.4-2</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
      <version>1.1.4-2</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.21</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <version>2.4.11</version>
      <classifier>indy</classifier>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.github.microutils</groupId>
      <artifactId>kotlin-logging</artifactId>
      <version>1.4.4</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.github.zafarkhaja</groupId>
      <artifactId>java-semver</artifactId>
      <version>0.9.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>2.12.3</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <version>2.12.3</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe.scala-logging</groupId>
      <artifactId>scala-logging_2.12</artifactId>
      <version>3.7.2</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>au.com.dius</groupId>
      <artifactId>pact-jvm-consumer_2.12</artifactId>
      <version>3.5.4-rc.1</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.specs2</groupId>
      <artifactId>specs2-core_2.12</artifactId>
      <version>3.9.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.specs2</groupId>
      <artifactId>specs2-junit_2.12</artifactId>
      <version>3.9.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.10.19</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-core</artifactId>
      <version>1.1-groovy-2.4</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.codehaus.groovy</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>3.2.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.objenesis</groupId>
      <artifactId>objenesis</artifactId>
      <version>2.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.groovy.modules.http-builder</groupId>
      <artifactId>http-builder</artifactId>
      <version>0.7.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.1.7</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
